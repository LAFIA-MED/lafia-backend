// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
}

enum ROLE {
  DOCTOR
  PATIENT
  ADMIN
  HOSPITAL
}

enum STATUS {
  PENDING_VERIFICATION
  VERIFIED
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?
  first_name      String
  last_name       String
  gender          GENDER
  phone           String    @unique
  role            ROLE
  status          STATUS
  isVerified      Boolean
  profile_picture String?
  date_of_birth   DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  Doctor          Doctor?
  Patient         Patient?
  otps            OTP[]

  @@map("users")
}

model Patient {
  id         String   @id @default(cuid())
  userId     String   @unique
  allergies  String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Appointment Appointment[]

  user User @relation(fields: [userId], references: [id])

  @@map("patients")
}

model Doctor {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialization String
  experience     Int
  license        String
  isActive       Boolean  @default(true)
  isAvailable    Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  Appointment   Appointment[]

  user       User      @relation(fields: [userId], references: [id])
  Hospital   Hospital? @relation(fields: [hospitalId], references: [id])
  hospitalId String

  @@map("doctors")
}

model Hospital {
  id         String   @id @default(cuid())
  name       String   @unique
  address    String
  license    String
  phone      String   @unique
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  doctors    Doctor[]

  @@map("hospitals")
}

model Drugs {
  id       String @id @default(cuid())
  name     String
  category String

  @@map("drugs")
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Appointment {
  id        String    @id @default(cuid())
  typeOfCare  String
  description String
  appointmentType String
  appointmentDate DateTime
  additionalNote String

  patient Patient @relation(fields: [patientId], references: [userId])
  doctor Doctor @relation(fields: [doctorId], references: [userId])

  patientId String
  doctorId  String

  @@map("appointments")
}
